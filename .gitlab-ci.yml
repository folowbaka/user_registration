# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.10-alpine

stages:
  - test
  - release
  - build
# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - .venv

integration_test:
  stage: test
  before_script:
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - |
      if [[ -f pyproject.toml ]];
      then
        pip install Cmake
        apk add libffi-dev
        pip install poetry
        # Setup virtual env in .venv      
        poetry config virtualenvs.in-project true
        poetry install
      else
        pip install virtualenv
        # Create the virtual env if it doesn't exists
        virtualenv .venv > /dev/null 2>&1 || true
        .venv/bin/pip install -r requirements.txt
      fi
    - source .venv/bin/activate
  script:
    - pytest ./tests/integration


docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $DOCKER_REGISTRY
  script:
    - docker build --cache-from=$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - tags

############ release ##############
release:
  image: $DOCKER_REGISTRY/$DOCKER_PYTHON_RELEASE_IMAGE
  stage: release
  before_script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git fetch origin master:master
    - pip install --upgrade pip
    - pip install Cmake
    - apk add libffi-dev
    - |
      if [[ -f pyproject.toml ]];
      then
        # Setup virtual env in .venv
        pip install poetry
        poetry config virtualenvs.in-project true
        poetry install
      else
        pip install virtualenv
        # Create the virtual env if it doesn't exists
        virtualenv .venv > /dev/null 2>&1 || true
        if [[ -f requirements-dev.txt ]]; then
          .venv/bin/pip install -r requirements-dev.txt
        else
          .venv/bin/pip install --upgrade python-semantic-release
        fi
      fi

    - source .venv/bin/activate
  script:
    - set -x
    - semantic-release publish --verbosity=DEBUG
    - |
      if [[ ! -z "$(git ls-remote origin develop)" ]];
      then
        git fetch origin develop
        git checkout develop
        git pull
        git merge master
        set +x
        git push https://oauth2:${GL_TOKEN}@gitlab.priv.sewan.fr/$CI_PROJECT_PATH.git HEAD:develop
      fi
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cache/pip
      - .venv
  only:
    - master
